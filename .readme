# e-GMAT Adaptive Practice Environment (P.A.C.E. Prototype)

## Project Overview

This project is a Python-based desktop application designed to simulate an **Adaptive Practice Environment** for GMAT preparation, drawing direct inspiration from the principles and technological focus of **e-GMAT**. It aims to provide learners with a tool that not only tests their knowledge but also offers insights into their performance, pacing, and behavioral state during a practice session, much like e-GMAT's P.A.C.E (Personalized Adaptive Course Engine) and AI-driven analytics.

The application integrates:
*   A timed, multiple-choice quiz interface.
*   Real-time behavioral metric analysis (frustration, confusion, confidence) via webcam (using OpenCV and DeepFace) or simulation.
*   Personalized question-level feedback using Google's Gemini AI.
*   Comprehensive post-session analysis and reporting, including AI-generated summaries, performance visualizations, and a detailed PDF report.

This prototype explores how e-GMAT's commitment to technology, adaptivity, personalized learning, and data-driven insights can be translated into a functional practice tool.

---

## Core Philosophy & e-GMAT Alignment

The development of this application was guided by research into e-GMAT's core philosophies and offerings:

1.  **Personalized Adaptive Learning (P.A.C.E. Spirit):**
    *   **e-GMAT:** Employs the P.A.C.E. engine to customize study paths, saving learner time.
    *   **This App:** While not fully adaptive in question *selection* (uses a randomized fixed set), it adapts its *feedback* and *analysis* based on individual performance, timing, and behavioral metrics. The AI-generated insights and comprehensive reports offer a personalized debrief, echoing P.A.C.E.'s goal of targeted improvement.

2.  **Technology and Data-Driven Insights:**
    *   **e-GMAT:** Leverages AI-driven video lessons, adaptive mock tests, and detailed analytics dashboards (e.g., OSR/ESR, Study Streak Rings).
    *   **This App:** Integrates **OpenCV & DeepFace** for real-time behavioral analysis and **Google Gemini AI** for qualitative feedback. Matplotlib and ReportLab generate visual and textual reports, providing data-driven insights into accuracy, pacing, and emotional state, similar to e-GMAT's analytics.

3.  **Smarter Practice & Fundamental Understanding:**
    *   **e-GMAT:** Focuses on fundamental understanding, structured processes, and data-driven identification of weaknesses.
    *   **This App:** The AI insights for each question aim to explain the *why* behind correct/incorrect answers, reinforcing concepts. The session analysis highlights strengths and areas for refinement by topic and subtopic.

4.  **Targeted Feedback & Coaching (Simulated):**
    *   **e-GMAT:** Offers "Last Mile Push" coaching and 24/7 doubt clearing.
    *   **This App:** The per-question AI insights and the comprehensive AI session analysis serve as a form of automated, personalized coaching, suggesting P.A.C.E. recommendations and focus areas.

5.  **Focus on Pacing and Strategy:**
    *   **e-GMAT:** Emphasizes time tracking and effective pacing strategies.
    *   **This App:** Tracks time spent on each question and provides average pacing metrics in the report, comparing them against recommended times, similar to e-GMAT's analytical approach.

6.  **Continuous Innovation & AI Adoption:**
    *   **e-GMAT:** Invests heavily in AI (hiring AI engineers, aiming to solve "Bloom's Two Sigma problem").
    *   **This App:** Serves as a proof-of-concept for integrating cutting-edge AI (Gemini for generative insights, DeepFace for behavioral analytics) into the learning process, exploring new frontiers in ed-tech as e-GMAT does.

---

## Key Features & Implementation (e-GMAT Inspired)

### 1. Learner Onboarding & Progress Tracking
*   **Inspired by:** e-GMAT's user accounts and progress tracking.
*   **Implemented:**
    *   `HomePage`: Allows learners to input their ID and Name.
    *   `CANDIDATES_FILE` (`egmat_candidate_registry.json`): Stores learner registrations.
    *   `REPORT_FILE_TEMPLATE` (`egmat_pacer_report_{}.json`): Stores individual learner session history, enabling review of past performance.
    *   `AppState` class centrally manages learner data for the current session.

### 2. Adaptive Practice Session
*   **Inspired by:** e-GMAT's core practice modules and timed environment.
*   **Implemented:**
    *   `TestPage`: Presents questions, options, and tracks time.
    *   `QUESTIONS_FILE` (`egmat.json`): Loads a question bank (with fallback if not found). Questions are randomized and options are shuffled to ensure unique test experiences.
    *   `load_and_randomize_questions()`: Ensures a varied set of questions with correctly mapped (and re-mapped after shuffle) answers.

### 3. Real-Time Behavioral Insights (Advanced P.A.C.E. Element)
*   **Inspired by:** e-GMAT's focus on understanding the "how" of learning and their pursuit of advanced AI for personalization. This feature extends beyond current e-GMAT public offerings but aligns with their AI ambitions.
*   **Implemented:**
    *   `initialize_camera()`: Attempts to find and configure a webcam.
    *   `detect_behavioral_metrics()`: A threaded function that continuously:
        *   Captures frames from the webcam (`cv2`).
        *   Analyzes frames using `DeepFace` for emotion detection (frustration, confusion, confidence proxies).
        *   Provides fallback simulated metrics if a camera/face isn't detected, ensuring the app remains functional.
        *   Calculates an "Overall P.A.C.E. Engagement Score."
    *   `TestPage` UI: Displays live webcam feed (if available) and real-time progress bars for behavioral metrics.

### 4. AI-Powered Personalized Feedback (Per-Question)
*   **Inspired by:** e-GMAT's structured verbal methods, clear explanations, and personalized coaching.
*   **Implemented:**
    *   `analyze_question_with_ai()`:
        *   Sends details of the learner's response (question, selected option, correct option, time spent, behavioral metrics) to `Google Gemini AI`.
        *   The AI is prompted to explain the correct answer, common traps, and provide a P.A.C.E. micro-recommendation based on the observed data for *that specific question*.

### 5. Comprehensive Session Reporting & Analysis
*   **Inspired by:** e-GMAT's detailed analytics dashboards and performance breakdowns.
*   **Implemented:**
    *   `process_session_results()`: Compiles raw session data.
    *   `analyze_session_performance()`: Calculates accuracy, average time, and aggregated behavioral metrics per topic and subtopic. Identifies recommendations based on predefined thresholds (e.g., `ACCURACY_WEAKNESS_THRESHOLD`).
    *   `perform_session_breakdown_analysis()`: Further categorizes subtopics into strengths, areas for refinement, etc.
    *   `create_session_visualizations()`: Generates `matplotlib` charts for accuracy, pacing, perceived confidence, and behavioral trends over time.
    *   `generate_ai_comprehensive_analysis()`: Uses `Google Gemini AI` to synthesize all session data (current performance, historical context if available, behavioral trends) into a structured narrative report, mimicking e-GMAT's coaching style by outlining:
        *   Performance Snapshot
        *   Behavioral Insights
        *   Targeted Focus Areas
        *   Actionable Next Steps & P.A.C.E. Recommendations
    *   `generate_pdf_report()`: Combines all textual analysis, tables, and visualizations into a comprehensive PDF report using `reportlab`.
    *   `ReportPage`: Displays a summary of the report and provides download options for JSON and PDF.

### 6. Robustness and Fallbacks
*   **Inspired by:** The need for a reliable platform like e-GMAT.
*   **Implemented:**
    *   Fallback questions if `egmat.json` is missing or corrupt.
    *   Simulated behavioral metrics if the camera or DeepFace fails.
    *   Error handling for AI API calls.
    *   Clear print statements for debugging and status monitoring, indicating different system states (e.g., "e-GMAT AI: ...", "e-GMAT Camera: ...").
    *   Safe JSON serialization using `NumpyEncoder`.
    *   AI model fallback (tries 'gemini-1.5-flash-latest', then 'gemini-2.0-flash').

---

## Technology Stack

*   **Core Language:** Python 3.12.4
*   **GUI:** Tkinter, ttk
*   **Computer Vision:** OpenCV (`cv2`)
*   **Facial Emotion Recognition:** DeepFace
*   **Generative AI:** Google Generative AI (`google-generativeai` for Gemini)
*   **Data Handling:** JSON, NumPy
*   **Plotting:** Matplotlib
*   **PDF Generation:** ReportLab
*   **Environment Management:** python-dotenv

---

## System Architecture (High-Level)

1.  **`AppState`**: A central class holding the application's dynamic state (current page, user info, session data, behavioral metrics, etc.), protected by a `threading.Lock`.
2.  **GUI (`GMATApp`, `HomePage`, `TestPage`, `CountdownPage`, `ReportPage`):** Tkinter frames manage user interaction and display information. The `GMATApp` class controls page navigation.
3.  **Behavioral Analysis Thread:** Runs `detect_behavioral_metrics()` concurrently to update `state.behavioral_metrics` without freezing the GUI.
4.  **Question Engine:** `load_and_randomize_questions()` prepares the quiz. `TestPage` manages question presentation and response collection.
5.  **AI Integration Modules:**
    *   `analyze_question_with_ai()`: For individual question feedback.
    *   `generate_ai_comprehensive_analysis()`: For overall session review.
6.  **Reporting Pipeline:** `process_session_results()`, `analyze_session_performance()`, `create_session_visualizations()`, and `generate_pdf_report()` work sequentially to produce the final outputs.
7.  **Data Persistence:** Learner and session data are saved/loaded as JSON files.

---

## Setup and Running Instructions

1.  **Prerequisites:**
    *   Python 3.12.4 (as specified)
    *   A webcam (for real-time behavioral analysis, optional)
    *   A Google Gemini API Key.

2.  **Clone the Repository:**
    ```bash
    git clone <repository-url>
    cd <repository-name>
    ```

3.  **Create a Virtual Environment (Recommended):**
    ```bash
    python -m venv venv
    source venv/bin/activate  # On Windows: venv\Scripts\activate
    ```

4.  **Install Dependencies:**
    A `requirements.txt` file should be created from the used libraries.
    ```
    # Example requirements.txt content (ensure versions match your setup)
    opencv-python
    deepface
    tensorflow # or tensorflow-cpu if you don't have a compatible GPU
    matplotlib
    numpy
    Pillow
    reportlab
    google-generativeai
    python-dotenv
    ```
    Install using:
    ```bash
    pip install -r requirements.txt
    ```
    *Note: `DeepFace` and `TensorFlow` can be large and might have specific system dependencies. Refer to their official documentation if you encounter issues.*

5.  **Set up Environment Variables:**
    *   Create a `.env` file in the root project directory.
    *   Add your Google Gemini API key:
        ```env
        GEMINI_API_KEY="YOUR_GEMINI_API_KEY"
        ```

6.  **Prepare Questions File:**
    *   Ensure the `QUESTIONS_FILE` (default: `C:\Users\HI\Desktop\fair hire\egmat.json`) exists and is correctly formatted. An example format is:
        ```json
        [
          {
            "question_id": 1,
            "question": "This is sample question text for SC.",
            "options": ["A. Option A text", "B. Option B text", "C. Option C text", "D. Option D text"],
            "answer": "A",
            "topic": "SC",
            "subtopic": "Modifiers",
            "difficulty": "Easy"
          },
          // ... more questions
        ]
        ```
    *   **Important:** The script will use fallback questions if this file is not found or is invalid. The script currently has a hardcoded path; you might want to make this relative or configurable. For this example, ensure the file is at `C:\Users\HI\Desktop\fair hire\egmat.json` or modify the `QUESTIONS_FILE` variable in the script.

7.  **Run the Application:**
    ```bash
    python your_script_name.py
    ```
    (Replace `your_script_name.py` with the actual name of your Python file).

---

## Behavioral Analysis Subsystem (DeepFace)

*   On first run, `DeepFace` will download necessary pre-trained models. This might take some time.
*   The system tries multiple camera indices (0-4) to find a working webcam.
*   If no face is detected or the camera fails, the system falls back to *simulated* behavioral metrics, ensuring the quiz can still proceed.
*   Accuracy of behavioral metrics heavily depends on lighting, face visibility, and DeepFace model performance. The current implementation uses broad emotion categories as proxies for frustration/effort, confusion/focus, and confidence.

---

## AI Integration (Google Gemini)

*   An active `GEMINI_API_KEY` is required for AI-powered insights.
*   If the API key is missing or invalid, or if API calls fail, AI-generated text will be replaced with placeholder messages (e.g., "No AI insight available.").
*   The application attempts to use `gemini-1.5-flash-latest` and falls back to `gemini-2.0-flash` if the primary model initialization fails.

---

## File Structure (Key Files)

*   `your_script_name.py`: The main application script.
*   `.env`: Stores the `GEMINI_API_KEY` (you need to create this).
*   `egmat.json` (External): Contains the GMAT practice questions (path needs to be correct).
*   `egmat_candidate_registry.json` (Generated): Stores registered candidate information.
*   `egmat_pacer_report_{learner_id}.json` (Generated): Stores session data for each learner.
*   Downloaded PDF/JSON reports (User-specified location).

---

## Potential Future Enhancements (Aligning Closer to e-GMAT)

1.  **True Adaptive Question Selection:** Implement an algorithm to select the next question based on performance on previous questions, difficulty, and targeted weak areas, truly emulating e-GMAT's P.A.C.E.
2.  **Expanded Content Modules:** Allow loading of distinct modules (e.g., Verbal, Quant, DI) rather than a single JSON file.
3.  **Sophisticated Skill-Tagging:** More granular tagging of questions to skills/concepts for finer-grained analysis.
4.  **Long-Term Progress Dashboards:** Aggregate data across multiple sessions to show learning trends, similar to e-GMAT's Study Streak Rings or OSR.
5.  **Integration with Learning Resources:** Link identified weaknesses directly to specific (simulated) learning modules or concept files.
6.  **Enhanced AI Chatbot Tutor:** Develop an interactive AI tutor using Gemini for real-time doubt clarification beyond static insights.

---

## Disclaimer

This project is a research-inspired prototype developed for educational and experimental purposes. It aims to explore the application of technology in personalized learning, drawing inspiration from e-GMAT. It is not an official e-GMAT product nor is it affiliated with e-GMAT in any way. The behavioral analysis component is experimental and its accuracy is subject to the limitations of current technology.